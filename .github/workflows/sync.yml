# NOTE refs
# - https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/#new-fromjson-method-in-expressions
# - https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script

name: sync

on:
  push: {}
  schedule:
    - cron: "0 0 * * MON"
  workflow_dispatch: {}

permissions:
  packages: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - uses: mikefarah/yq@master
      - id: set
        run: |
          echo "matrix=$(jq '.sync' -r -c <<< "$(yq e . -o json config.yaml)")" >> $GITHUB_OUTPUT
      - name: check output
        run: |
          jq . <<< '${{ steps.prepare.outputs.matrix }}'
  sync:
    if: ${{ fromJSON(needs.prepare.outputs.matrix) != null }}
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      source: ${{ steps.get-digests.outputs.source }}
      destination: ${{ steps.get-digests.outputs.destination }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
      - uses: imjasonh/setup-crane@v0.1
      - uses: sigstore/cosign-installer@main
      - name: quay crane login
        env:
          quay-robot-token: ${{ secrets.QUAY_ROBOT_TOKEN }}
          quay-username: ${{ secrets.QUAY_USERNAME }}
        if: ${{ env.quay-robot-token != null && env.quay-username != null }}
        run: |
          echo "${{ env.quay-robot-token }}" | crane auth login --password-stdin quay.io ${{ env.quay-username }}
      - name: get-digests
        if: ${{ fromJSON(toJSON(matrix)).always != true }}
        id: get-digests
        env:
          SOURCE: ${{ fromJSON(toJSON(matrix)).source }}
          DESTINATION: ${{ fromJSON(toJSON(matrix)).destination }}
        run: |
          SOURCE_DIGEST="$(crane digest "${SOURCE}" || true)"
          DESTINATION_DIGEST="$(crane digest "${DESTINATION}" || true)"
          (
            echo "SOURCE-DIGEST DESTINATION-DIGEST"
            echo "${SOURCE_DIGEST} ${DESTINATION_DIGEST}"
          ) | column -t
          echo "source=${SOURCE_DIGEST}" >> $GITHUB_OUTPUT
          echo "destination=${DESTINATION_DIGEST}" >> $GITHUB_OUTPUT
      - name: copy
        if: ${{ steps.get-digests.outputs.source != steps.get-digests.outputs.destination || steps.get-digests .outputs.destination == null || fromJSON(toJSON(matrix)).always == true }}
        env:
          SOURCE: ${{ fromJSON(toJSON(matrix)).source }}
          DESTINATION: ${{ fromJSON(toJSON(matrix)).destination }}
        run: |
          crane cp $SOURCE $DESTINATION
      - name: get-synced-digests
        if: ${{ steps.get-digests.outputs.source != steps.get-digests.outputs.destination || steps.get-digests .outputs.destination == null || fromJSON(toJSON(matrix)).always == true }}
        id: get-synced-digests
        env:
          DESTINATION: ${{ fromJSON(toJSON(matrix)).destination }}
        run: |
          DESTINATION_DIGEST="$(crane digest "${DESTINATION}" || true)"
          (
            echo "${SOURCE_DIGEST} ${DESTINATION_DIGEST}"
          ) | column -t
          echo "destination=${DESTINATION_DIGEST}" >> $GITHUB_OUTPUT
      - name: Sign image with a key
        if: ${{ steps.get-digests.outputs.source != steps.get-digests.outputs.destination || steps.get-digests .outputs.destination == null || fromJSON(toJSON(matrix)).always == true }}
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_YES: "true"
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY ${{ fromJSON(toJSON(matrix)).destination }}@${{ steps.get-synced-digests.outputs.destination }} -y
      - uses: anchore/sbom-action@v0
        if: ${{ steps.get-digests.outputs.source != steps.get-digests.outputs.destination || steps.get-digests .outputs.destination == null || fromJSON(toJSON(matrix)).always == true }}
        with:
          image: ${{ fromJSON(toJSON(matrix)).destination }}@${{ steps.get-digests.outputs.destination }}
          artifact-name: sbom-spdx.json
          output-file: /tmp/sbom-spdx.json
      - name: publish sbom blob as blob
        if: ${{ steps.get-digests.outputs.source != steps.get-digests.outputs.destination || steps.get-digests .outputs.destination == null || fromJSON(toJSON(matrix)).always == true }}
        env:
          ARTIFACT_NAME: ${{ fromJSON(toJSON(matrix)).sbom.artifactName }}
          DESTINATION: ${{ fromJSON(toJSON(matrix)).destination }}
        run: |
          DESTINATION_REPO="$(echo ${{ fromJSON(toJSON(matrix)).destination }} | cut -d ':' -f1)"
          DIGEST="$(echo ${{ steps.get-digests.outputs.destination }} | cut -d ':' -f2)"
          cosign upload blob -f /tmp/sbom-spdx.json $DESTINATION_REPO:sha256-$DIGEST.sbom
